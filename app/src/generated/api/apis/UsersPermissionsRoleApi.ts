/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mateja176@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    NewUsersPermissionsRole,
    NewUsersPermissionsRoleFromJSON,
    NewUsersPermissionsRoleToJSON,
    UsersPermissionsRole,
    UsersPermissionsRoleFromJSON,
    UsersPermissionsRoleToJSON,
} from '../models';

export interface UsersPermissionsRolesGetRequest {
    limit?: number;
    sort?: string;
    start?: number;
    idEq?: string;
    idNe?: string;
    idLt?: string;
    idLte?: string;
    idGt?: string;
    idGte?: string;
    idContains?: string;
    idContainss?: string;
    idIn?: Array<string>;
    idNin?: Array<string>;
    nameEq?: string;
    nameNe?: string;
    nameLt?: string;
    nameLte?: string;
    nameGt?: string;
    nameGte?: string;
    nameContains?: string;
    nameContainss?: string;
    nameIn?: Array<string>;
    nameNin?: Array<string>;
    descriptionEq?: string;
    descriptionNe?: string;
    descriptionLt?: string;
    descriptionLte?: string;
    descriptionGt?: string;
    descriptionGte?: string;
    descriptionContains?: string;
    descriptionContainss?: string;
    descriptionIn?: Array<string>;
    descriptionNin?: Array<string>;
    typeEq?: string;
    typeNe?: string;
    typeLt?: string;
    typeLte?: string;
    typeGt?: string;
    typeGte?: string;
    typeContains?: string;
    typeContainss?: string;
    typeIn?: Array<string>;
    typeNin?: Array<string>;
    permissionsEq?: string;
    permissionsNe?: string;
    permissionsLt?: string;
    permissionsLte?: string;
    permissionsGt?: string;
    permissionsGte?: string;
    permissionsContains?: string;
    permissionsContainss?: string;
    permissionsIn?: Array<string>;
    permissionsNin?: Array<string>;
    usersEq?: string;
    usersNe?: string;
    usersLt?: string;
    usersLte?: string;
    usersGt?: string;
    usersGte?: string;
    usersContains?: string;
    usersContainss?: string;
    usersIn?: Array<string>;
    usersNin?: Array<string>;
    where?: any;
}

export interface UsersPermissionsRolesIdGetRequest {
    id: string;
}

export interface UsersPermissionsRolesPostRequest {
    newUsersPermissionsRole: NewUsersPermissionsRole;
}

export interface UsersPermissionsRolesRoleDeleteRequest {
    role: string;
}

export interface UsersPermissionsRolesRolePutRequest {
    role: string;
    newUsersPermissionsRole: NewUsersPermissionsRole;
}

/**
 * 
 */
export class UsersPermissionsRoleApi extends runtime.BaseAPI {

    /**
     * Retrieve all role documents
     */
    async usersPermissionsRolesGetRaw(requestParameters: UsersPermissionsRolesGetRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['_start'] = requestParameters.start;
        }

        if (requestParameters.idEq !== undefined) {
            queryParameters['id_eq'] = requestParameters.idEq;
        }

        if (requestParameters.idNe !== undefined) {
            queryParameters['id_ne'] = requestParameters.idNe;
        }

        if (requestParameters.idLt !== undefined) {
            queryParameters['id_lt'] = requestParameters.idLt;
        }

        if (requestParameters.idLte !== undefined) {
            queryParameters['id_lte'] = requestParameters.idLte;
        }

        if (requestParameters.idGt !== undefined) {
            queryParameters['id_gt'] = requestParameters.idGt;
        }

        if (requestParameters.idGte !== undefined) {
            queryParameters['id_gte'] = requestParameters.idGte;
        }

        if (requestParameters.idContains !== undefined) {
            queryParameters['id_contains'] = requestParameters.idContains;
        }

        if (requestParameters.idContainss !== undefined) {
            queryParameters['id_containss'] = requestParameters.idContainss;
        }

        if (requestParameters.idIn) {
            queryParameters['id_in'] = requestParameters.idIn;
        }

        if (requestParameters.idNin) {
            queryParameters['id_nin'] = requestParameters.idNin;
        }

        if (requestParameters.nameEq !== undefined) {
            queryParameters['name_eq'] = requestParameters.nameEq;
        }

        if (requestParameters.nameNe !== undefined) {
            queryParameters['name_ne'] = requestParameters.nameNe;
        }

        if (requestParameters.nameLt !== undefined) {
            queryParameters['name_lt'] = requestParameters.nameLt;
        }

        if (requestParameters.nameLte !== undefined) {
            queryParameters['name_lte'] = requestParameters.nameLte;
        }

        if (requestParameters.nameGt !== undefined) {
            queryParameters['name_gt'] = requestParameters.nameGt;
        }

        if (requestParameters.nameGte !== undefined) {
            queryParameters['name_gte'] = requestParameters.nameGte;
        }

        if (requestParameters.nameContains !== undefined) {
            queryParameters['name_contains'] = requestParameters.nameContains;
        }

        if (requestParameters.nameContainss !== undefined) {
            queryParameters['name_containss'] = requestParameters.nameContainss;
        }

        if (requestParameters.nameIn) {
            queryParameters['name_in'] = requestParameters.nameIn;
        }

        if (requestParameters.nameNin) {
            queryParameters['name_nin'] = requestParameters.nameNin;
        }

        if (requestParameters.descriptionEq !== undefined) {
            queryParameters['description_eq'] = requestParameters.descriptionEq;
        }

        if (requestParameters.descriptionNe !== undefined) {
            queryParameters['description_ne'] = requestParameters.descriptionNe;
        }

        if (requestParameters.descriptionLt !== undefined) {
            queryParameters['description_lt'] = requestParameters.descriptionLt;
        }

        if (requestParameters.descriptionLte !== undefined) {
            queryParameters['description_lte'] = requestParameters.descriptionLte;
        }

        if (requestParameters.descriptionGt !== undefined) {
            queryParameters['description_gt'] = requestParameters.descriptionGt;
        }

        if (requestParameters.descriptionGte !== undefined) {
            queryParameters['description_gte'] = requestParameters.descriptionGte;
        }

        if (requestParameters.descriptionContains !== undefined) {
            queryParameters['description_contains'] = requestParameters.descriptionContains;
        }

        if (requestParameters.descriptionContainss !== undefined) {
            queryParameters['description_containss'] = requestParameters.descriptionContainss;
        }

        if (requestParameters.descriptionIn) {
            queryParameters['description_in'] = requestParameters.descriptionIn;
        }

        if (requestParameters.descriptionNin) {
            queryParameters['description_nin'] = requestParameters.descriptionNin;
        }

        if (requestParameters.typeEq !== undefined) {
            queryParameters['type_eq'] = requestParameters.typeEq;
        }

        if (requestParameters.typeNe !== undefined) {
            queryParameters['type_ne'] = requestParameters.typeNe;
        }

        if (requestParameters.typeLt !== undefined) {
            queryParameters['type_lt'] = requestParameters.typeLt;
        }

        if (requestParameters.typeLte !== undefined) {
            queryParameters['type_lte'] = requestParameters.typeLte;
        }

        if (requestParameters.typeGt !== undefined) {
            queryParameters['type_gt'] = requestParameters.typeGt;
        }

        if (requestParameters.typeGte !== undefined) {
            queryParameters['type_gte'] = requestParameters.typeGte;
        }

        if (requestParameters.typeContains !== undefined) {
            queryParameters['type_contains'] = requestParameters.typeContains;
        }

        if (requestParameters.typeContainss !== undefined) {
            queryParameters['type_containss'] = requestParameters.typeContainss;
        }

        if (requestParameters.typeIn) {
            queryParameters['type_in'] = requestParameters.typeIn;
        }

        if (requestParameters.typeNin) {
            queryParameters['type_nin'] = requestParameters.typeNin;
        }

        if (requestParameters.permissionsEq !== undefined) {
            queryParameters['permissions_eq'] = requestParameters.permissionsEq;
        }

        if (requestParameters.permissionsNe !== undefined) {
            queryParameters['permissions_ne'] = requestParameters.permissionsNe;
        }

        if (requestParameters.permissionsLt !== undefined) {
            queryParameters['permissions_lt'] = requestParameters.permissionsLt;
        }

        if (requestParameters.permissionsLte !== undefined) {
            queryParameters['permissions_lte'] = requestParameters.permissionsLte;
        }

        if (requestParameters.permissionsGt !== undefined) {
            queryParameters['permissions_gt'] = requestParameters.permissionsGt;
        }

        if (requestParameters.permissionsGte !== undefined) {
            queryParameters['permissions_gte'] = requestParameters.permissionsGte;
        }

        if (requestParameters.permissionsContains !== undefined) {
            queryParameters['permissions_contains'] = requestParameters.permissionsContains;
        }

        if (requestParameters.permissionsContainss !== undefined) {
            queryParameters['permissions_containss'] = requestParameters.permissionsContainss;
        }

        if (requestParameters.permissionsIn) {
            queryParameters['permissions_in'] = requestParameters.permissionsIn;
        }

        if (requestParameters.permissionsNin) {
            queryParameters['permissions_nin'] = requestParameters.permissionsNin;
        }

        if (requestParameters.usersEq !== undefined) {
            queryParameters['users_eq'] = requestParameters.usersEq;
        }

        if (requestParameters.usersNe !== undefined) {
            queryParameters['users_ne'] = requestParameters.usersNe;
        }

        if (requestParameters.usersLt !== undefined) {
            queryParameters['users_lt'] = requestParameters.usersLt;
        }

        if (requestParameters.usersLte !== undefined) {
            queryParameters['users_lte'] = requestParameters.usersLte;
        }

        if (requestParameters.usersGt !== undefined) {
            queryParameters['users_gt'] = requestParameters.usersGt;
        }

        if (requestParameters.usersGte !== undefined) {
            queryParameters['users_gte'] = requestParameters.usersGte;
        }

        if (requestParameters.usersContains !== undefined) {
            queryParameters['users_contains'] = requestParameters.usersContains;
        }

        if (requestParameters.usersContainss !== undefined) {
            queryParameters['users_containss'] = requestParameters.usersContainss;
        }

        if (requestParameters.usersIn) {
            queryParameters['users_in'] = requestParameters.usersIn;
        }

        if (requestParameters.usersNin) {
            queryParameters['users_nin'] = requestParameters.usersNin;
        }

        if (requestParameters.where !== undefined) {
            queryParameters['_where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users-permissions/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Retrieve all role documents
     */
    async usersPermissionsRolesGet(requestParameters: UsersPermissionsRolesGetRequest): Promise<InlineResponse200> {
        const response = await this.usersPermissionsRolesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a role depending on its id
     */
    async usersPermissionsRolesIdGetRaw(requestParameters: UsersPermissionsRolesIdGetRequest): Promise<runtime.ApiResponse<UsersPermissionsRole>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersPermissionsRolesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users-permissions/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPermissionsRoleFromJSON(jsonValue));
    }

    /**
     * Retrieve a role depending on its id
     */
    async usersPermissionsRolesIdGet(requestParameters: UsersPermissionsRolesIdGetRequest): Promise<UsersPermissionsRole> {
        const response = await this.usersPermissionsRolesIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new role
     */
    async usersPermissionsRolesPostRaw(requestParameters: UsersPermissionsRolesPostRequest): Promise<runtime.ApiResponse<UsersPermissionsRole>> {
        if (requestParameters.newUsersPermissionsRole === null || requestParameters.newUsersPermissionsRole === undefined) {
            throw new runtime.RequiredError('newUsersPermissionsRole','Required parameter requestParameters.newUsersPermissionsRole was null or undefined when calling usersPermissionsRolesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users-permissions/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewUsersPermissionsRoleToJSON(requestParameters.newUsersPermissionsRole),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPermissionsRoleFromJSON(jsonValue));
    }

    /**
     * Create a new role
     */
    async usersPermissionsRolesPost(requestParameters: UsersPermissionsRolesPostRequest): Promise<UsersPermissionsRole> {
        const response = await this.usersPermissionsRolesPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a role
     */
    async usersPermissionsRolesRoleDeleteRaw(requestParameters: UsersPermissionsRolesRoleDeleteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling usersPermissionsRolesRoleDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users-permissions/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a role
     */
    async usersPermissionsRolesRoleDelete(requestParameters: UsersPermissionsRolesRoleDeleteRequest): Promise<object> {
        const response = await this.usersPermissionsRolesRoleDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a role
     */
    async usersPermissionsRolesRolePutRaw(requestParameters: UsersPermissionsRolesRolePutRequest): Promise<runtime.ApiResponse<UsersPermissionsRole>> {
        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling usersPermissionsRolesRolePut.');
        }

        if (requestParameters.newUsersPermissionsRole === null || requestParameters.newUsersPermissionsRole === undefined) {
            throw new runtime.RequiredError('newUsersPermissionsRole','Required parameter requestParameters.newUsersPermissionsRole was null or undefined when calling usersPermissionsRolesRolePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users-permissions/roles/{role}`.replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewUsersPermissionsRoleToJSON(requestParameters.newUsersPermissionsRole),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPermissionsRoleFromJSON(jsonValue));
    }

    /**
     * Update a role
     */
    async usersPermissionsRolesRolePut(requestParameters: UsersPermissionsRolesRolePutRequest): Promise<UsersPermissionsRole> {
        const response = await this.usersPermissionsRolesRolePutRaw(requestParameters);
        return await response.value();
    }

}
