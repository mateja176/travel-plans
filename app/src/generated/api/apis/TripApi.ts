/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mateja176@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NewTrip,
    NewTripFromJSON,
    NewTripToJSON,
    Trip,
    TripFromJSON,
    TripToJSON,
} from '../models';

export interface TripsGetRequest {
    limit?: number;
    sort?: string;
    start?: number;
    idEq?: string;
    idNe?: string;
    idLt?: string;
    idLte?: string;
    idGt?: string;
    idGte?: string;
    idContains?: string;
    idContainss?: string;
    idIn?: Array<string>;
    idNin?: Array<string>;
    destinationEq?: string;
    destinationNe?: string;
    destinationLt?: string;
    destinationLte?: string;
    destinationGt?: string;
    destinationGte?: string;
    destinationContains?: string;
    destinationContainss?: string;
    destinationIn?: Array<string>;
    destinationNin?: Array<string>;
    startDateEq?: string;
    startDateNe?: string;
    startDateLt?: string;
    startDateLte?: string;
    startDateGt?: string;
    startDateGte?: string;
    startDateContains?: string;
    startDateContainss?: string;
    startDateIn?: Array<string>;
    startDateNin?: Array<string>;
    endDateEq?: string;
    endDateNe?: string;
    endDateLt?: string;
    endDateLte?: string;
    endDateGt?: string;
    endDateGte?: string;
    endDateContains?: string;
    endDateContainss?: string;
    endDateIn?: Array<string>;
    endDateNin?: Array<string>;
    commentEq?: string;
    commentNe?: string;
    commentLt?: string;
    commentLte?: string;
    commentGt?: string;
    commentGte?: string;
    commentContains?: string;
    commentContainss?: string;
    commentIn?: Array<string>;
    commentNin?: Array<string>;
    userEq?: string;
    userNe?: string;
    userLt?: string;
    userLte?: string;
    userGt?: string;
    userGte?: string;
    userContains?: string;
    userContainss?: string;
    userIn?: Array<string>;
    userNin?: Array<string>;
    publishedAtEq?: string;
    publishedAtNe?: string;
    publishedAtLt?: string;
    publishedAtLte?: string;
    publishedAtGt?: string;
    publishedAtGte?: string;
    publishedAtContains?: string;
    publishedAtContainss?: string;
    publishedAtIn?: Array<string>;
    publishedAtNin?: Array<string>;
    userId?: string;
    where?: any;
}

export interface TripsIdDeleteRequest {
    id: string;
}

export interface TripsIdGetRequest {
    id: string;
}

export interface TripsIdPutRequest {
    id: string;
    newTrip: NewTrip;
}

export interface TripsPostRequest {
    newTrip: NewTrip;
}

/**
 * 
 */
export class TripApi extends runtime.BaseAPI {

    /**
     */
    async tripsCountGetRaw(): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trips/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async tripsCountGet(): Promise<number> {
        const response = await this.tripsCountGetRaw();
        return await response.value();
    }

    /**
     */
    async tripsGetRaw(requestParameters: TripsGetRequest): Promise<runtime.ApiResponse<Array<Trip>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['_start'] = requestParameters.start;
        }

        if (requestParameters.idEq !== undefined) {
            queryParameters['id_eq'] = requestParameters.idEq;
        }

        if (requestParameters.idNe !== undefined) {
            queryParameters['id_ne'] = requestParameters.idNe;
        }

        if (requestParameters.idLt !== undefined) {
            queryParameters['id_lt'] = requestParameters.idLt;
        }

        if (requestParameters.idLte !== undefined) {
            queryParameters['id_lte'] = requestParameters.idLte;
        }

        if (requestParameters.idGt !== undefined) {
            queryParameters['id_gt'] = requestParameters.idGt;
        }

        if (requestParameters.idGte !== undefined) {
            queryParameters['id_gte'] = requestParameters.idGte;
        }

        if (requestParameters.idContains !== undefined) {
            queryParameters['id_contains'] = requestParameters.idContains;
        }

        if (requestParameters.idContainss !== undefined) {
            queryParameters['id_containss'] = requestParameters.idContainss;
        }

        if (requestParameters.idIn) {
            queryParameters['id_in'] = requestParameters.idIn;
        }

        if (requestParameters.idNin) {
            queryParameters['id_nin'] = requestParameters.idNin;
        }

        if (requestParameters.destinationEq !== undefined) {
            queryParameters['destination_eq'] = requestParameters.destinationEq;
        }

        if (requestParameters.destinationNe !== undefined) {
            queryParameters['destination_ne'] = requestParameters.destinationNe;
        }

        if (requestParameters.destinationLt !== undefined) {
            queryParameters['destination_lt'] = requestParameters.destinationLt;
        }

        if (requestParameters.destinationLte !== undefined) {
            queryParameters['destination_lte'] = requestParameters.destinationLte;
        }

        if (requestParameters.destinationGt !== undefined) {
            queryParameters['destination_gt'] = requestParameters.destinationGt;
        }

        if (requestParameters.destinationGte !== undefined) {
            queryParameters['destination_gte'] = requestParameters.destinationGte;
        }

        if (requestParameters.destinationContains !== undefined) {
            queryParameters['destination_contains'] = requestParameters.destinationContains;
        }

        if (requestParameters.destinationContainss !== undefined) {
            queryParameters['destination_containss'] = requestParameters.destinationContainss;
        }

        if (requestParameters.destinationIn) {
            queryParameters['destination_in'] = requestParameters.destinationIn;
        }

        if (requestParameters.destinationNin) {
            queryParameters['destination_nin'] = requestParameters.destinationNin;
        }

        if (requestParameters.startDateEq !== undefined) {
            queryParameters['startDate_eq'] = requestParameters.startDateEq;
        }

        if (requestParameters.startDateNe !== undefined) {
            queryParameters['startDate_ne'] = requestParameters.startDateNe;
        }

        if (requestParameters.startDateLt !== undefined) {
            queryParameters['startDate_lt'] = requestParameters.startDateLt;
        }

        if (requestParameters.startDateLte !== undefined) {
            queryParameters['startDate_lte'] = requestParameters.startDateLte;
        }

        if (requestParameters.startDateGt !== undefined) {
            queryParameters['startDate_gt'] = requestParameters.startDateGt;
        }

        if (requestParameters.startDateGte !== undefined) {
            queryParameters['startDate_gte'] = requestParameters.startDateGte;
        }

        if (requestParameters.startDateContains !== undefined) {
            queryParameters['startDate_contains'] = requestParameters.startDateContains;
        }

        if (requestParameters.startDateContainss !== undefined) {
            queryParameters['startDate_containss'] = requestParameters.startDateContainss;
        }

        if (requestParameters.startDateIn) {
            queryParameters['startDate_in'] = requestParameters.startDateIn;
        }

        if (requestParameters.startDateNin) {
            queryParameters['startDate_nin'] = requestParameters.startDateNin;
        }

        if (requestParameters.endDateEq !== undefined) {
            queryParameters['endDate_eq'] = requestParameters.endDateEq;
        }

        if (requestParameters.endDateNe !== undefined) {
            queryParameters['endDate_ne'] = requestParameters.endDateNe;
        }

        if (requestParameters.endDateLt !== undefined) {
            queryParameters['endDate_lt'] = requestParameters.endDateLt;
        }

        if (requestParameters.endDateLte !== undefined) {
            queryParameters['endDate_lte'] = requestParameters.endDateLte;
        }

        if (requestParameters.endDateGt !== undefined) {
            queryParameters['endDate_gt'] = requestParameters.endDateGt;
        }

        if (requestParameters.endDateGte !== undefined) {
            queryParameters['endDate_gte'] = requestParameters.endDateGte;
        }

        if (requestParameters.endDateContains !== undefined) {
            queryParameters['endDate_contains'] = requestParameters.endDateContains;
        }

        if (requestParameters.endDateContainss !== undefined) {
            queryParameters['endDate_containss'] = requestParameters.endDateContainss;
        }

        if (requestParameters.endDateIn) {
            queryParameters['endDate_in'] = requestParameters.endDateIn;
        }

        if (requestParameters.endDateNin) {
            queryParameters['endDate_nin'] = requestParameters.endDateNin;
        }

        if (requestParameters.commentEq !== undefined) {
            queryParameters['comment_eq'] = requestParameters.commentEq;
        }

        if (requestParameters.commentNe !== undefined) {
            queryParameters['comment_ne'] = requestParameters.commentNe;
        }

        if (requestParameters.commentLt !== undefined) {
            queryParameters['comment_lt'] = requestParameters.commentLt;
        }

        if (requestParameters.commentLte !== undefined) {
            queryParameters['comment_lte'] = requestParameters.commentLte;
        }

        if (requestParameters.commentGt !== undefined) {
            queryParameters['comment_gt'] = requestParameters.commentGt;
        }

        if (requestParameters.commentGte !== undefined) {
            queryParameters['comment_gte'] = requestParameters.commentGte;
        }

        if (requestParameters.commentContains !== undefined) {
            queryParameters['comment_contains'] = requestParameters.commentContains;
        }

        if (requestParameters.commentContainss !== undefined) {
            queryParameters['comment_containss'] = requestParameters.commentContainss;
        }

        if (requestParameters.commentIn) {
            queryParameters['comment_in'] = requestParameters.commentIn;
        }

        if (requestParameters.commentNin) {
            queryParameters['comment_nin'] = requestParameters.commentNin;
        }

        if (requestParameters.userEq !== undefined) {
            queryParameters['user_eq'] = requestParameters.userEq;
        }

        if (requestParameters.userNe !== undefined) {
            queryParameters['user_ne'] = requestParameters.userNe;
        }

        if (requestParameters.userLt !== undefined) {
            queryParameters['user_lt'] = requestParameters.userLt;
        }

        if (requestParameters.userLte !== undefined) {
            queryParameters['user_lte'] = requestParameters.userLte;
        }

        if (requestParameters.userGt !== undefined) {
            queryParameters['user_gt'] = requestParameters.userGt;
        }

        if (requestParameters.userGte !== undefined) {
            queryParameters['user_gte'] = requestParameters.userGte;
        }

        if (requestParameters.userContains !== undefined) {
            queryParameters['user_contains'] = requestParameters.userContains;
        }

        if (requestParameters.userContainss !== undefined) {
            queryParameters['user_containss'] = requestParameters.userContainss;
        }

        if (requestParameters.userIn) {
            queryParameters['user_in'] = requestParameters.userIn;
        }

        if (requestParameters.userNin) {
            queryParameters['user_nin'] = requestParameters.userNin;
        }

        if (requestParameters.publishedAtEq !== undefined) {
            queryParameters['published_at_eq'] = requestParameters.publishedAtEq;
        }

        if (requestParameters.publishedAtNe !== undefined) {
            queryParameters['published_at_ne'] = requestParameters.publishedAtNe;
        }

        if (requestParameters.publishedAtLt !== undefined) {
            queryParameters['published_at_lt'] = requestParameters.publishedAtLt;
        }

        if (requestParameters.publishedAtLte !== undefined) {
            queryParameters['published_at_lte'] = requestParameters.publishedAtLte;
        }

        if (requestParameters.publishedAtGt !== undefined) {
            queryParameters['published_at_gt'] = requestParameters.publishedAtGt;
        }

        if (requestParameters.publishedAtGte !== undefined) {
            queryParameters['published_at_gte'] = requestParameters.publishedAtGte;
        }

        if (requestParameters.publishedAtContains !== undefined) {
            queryParameters['published_at_contains'] = requestParameters.publishedAtContains;
        }

        if (requestParameters.publishedAtContainss !== undefined) {
            queryParameters['published_at_containss'] = requestParameters.publishedAtContainss;
        }

        if (requestParameters.publishedAtIn) {
            queryParameters['published_at_in'] = requestParameters.publishedAtIn;
        }

        if (requestParameters.publishedAtNin) {
            queryParameters['published_at_nin'] = requestParameters.publishedAtNin;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user.id'] = requestParameters.userId;
        }

        if (requestParameters.where !== undefined) {
            queryParameters['_where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trips`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TripFromJSON));
    }

    /**
     */
    async tripsGet(requestParameters: TripsGetRequest): Promise<Array<Trip>> {
        const response = await this.tripsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a record
     */
    async tripsIdDeleteRaw(requestParameters: TripsIdDeleteRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tripsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trips/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete a record
     */
    async tripsIdDelete(requestParameters: TripsIdDeleteRequest): Promise<number> {
        const response = await this.tripsIdDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async tripsIdGetRaw(requestParameters: TripsIdGetRequest): Promise<runtime.ApiResponse<Trip>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tripsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trips/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TripFromJSON(jsonValue));
    }

    /**
     */
    async tripsIdGet(requestParameters: TripsIdGetRequest): Promise<Trip> {
        const response = await this.tripsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a record
     */
    async tripsIdPutRaw(requestParameters: TripsIdPutRequest): Promise<runtime.ApiResponse<Trip>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tripsIdPut.');
        }

        if (requestParameters.newTrip === null || requestParameters.newTrip === undefined) {
            throw new runtime.RequiredError('newTrip','Required parameter requestParameters.newTrip was null or undefined when calling tripsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trips/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewTripToJSON(requestParameters.newTrip),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TripFromJSON(jsonValue));
    }

    /**
     * Update a record
     */
    async tripsIdPut(requestParameters: TripsIdPutRequest): Promise<Trip> {
        const response = await this.tripsIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new record
     */
    async tripsPostRaw(requestParameters: TripsPostRequest): Promise<runtime.ApiResponse<Trip>> {
        if (requestParameters.newTrip === null || requestParameters.newTrip === undefined) {
            throw new runtime.RequiredError('newTrip','Required parameter requestParameters.newTrip was null or undefined when calling tripsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trips`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewTripToJSON(requestParameters.newTrip),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TripFromJSON(jsonValue));
    }

    /**
     * Create a new record
     */
    async tripsPost(requestParameters: TripsPostRequest): Promise<Trip> {
        const response = await this.tripsPostRaw(requestParameters);
        return await response.value();
    }

}
