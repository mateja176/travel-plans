/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mateja176@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthResponse,
    AuthResponseFromJSON,
    AuthResponseToJSON,
    LoginRequest,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    NewUsersPermissionsUser,
    NewUsersPermissionsUserFromJSON,
    NewUsersPermissionsUserToJSON,
    UsersPermissionsUser,
    UsersPermissionsUserFromJSON,
    UsersPermissionsUserToJSON,
} from '../models';

export interface AuthForgotPasswordPostRequest {
    body: object;
}

export interface AuthLocalPostRequest {
    loginRequest: LoginRequest;
}

export interface AuthLocalRegisterPostRequest {
    newUsersPermissionsUser: NewUsersPermissionsUser;
}

export interface AuthProviderCallbackGetRequest {
    provider: string;
}

export interface AuthResetPasswordPostRequest {
    body: object;
}

export interface AuthSendEmailConfirmationPostRequest {
    body: object;
}

export interface UsersGetRequest {
    limit?: number;
    sort?: string;
    start?: number;
    idEq?: string;
    idNe?: string;
    idLt?: string;
    idLte?: string;
    idGt?: string;
    idGte?: string;
    idContains?: string;
    idContainss?: string;
    idIn?: Array<string>;
    idNin?: Array<string>;
    usernameEq?: string;
    usernameNe?: string;
    usernameLt?: string;
    usernameLte?: string;
    usernameGt?: string;
    usernameGte?: string;
    usernameContains?: string;
    usernameContainss?: string;
    usernameIn?: Array<string>;
    usernameNin?: Array<string>;
    emailEq?: string;
    emailNe?: string;
    emailLt?: string;
    emailLte?: string;
    emailGt?: string;
    emailGte?: string;
    emailContains?: string;
    emailContainss?: string;
    emailIn?: Array<string>;
    emailNin?: Array<string>;
    providerEq?: string;
    providerNe?: string;
    providerLt?: string;
    providerLte?: string;
    providerGt?: string;
    providerGte?: string;
    providerContains?: string;
    providerContainss?: string;
    providerIn?: Array<string>;
    providerNin?: Array<string>;
    confirmedEq?: string;
    confirmedNe?: string;
    confirmedLt?: string;
    confirmedLte?: string;
    confirmedGt?: string;
    confirmedGte?: string;
    confirmedContains?: string;
    confirmedContainss?: string;
    confirmedIn?: Array<string>;
    confirmedNin?: Array<string>;
    blockedEq?: string;
    blockedNe?: string;
    blockedLt?: string;
    blockedLte?: string;
    blockedGt?: string;
    blockedGte?: string;
    blockedContains?: string;
    blockedContainss?: string;
    blockedIn?: Array<string>;
    blockedNin?: Array<string>;
    roleEq?: string;
    roleNe?: string;
    roleLt?: string;
    roleLte?: string;
    roleGt?: string;
    roleGte?: string;
    roleContains?: string;
    roleContainss?: string;
    roleIn?: Array<string>;
    roleNin?: Array<string>;
    tripsEq?: string;
    tripsNe?: string;
    tripsLt?: string;
    tripsLte?: string;
    tripsGt?: string;
    tripsGte?: string;
    tripsContains?: string;
    tripsContainss?: string;
    tripsIn?: Array<string>;
    tripsNin?: Array<string>;
}

export interface UsersIdDeleteRequest {
    id: string;
}

export interface UsersIdGetRequest {
    id: string;
}

export interface UsersIdPutRequest {
    id: string;
    newUsersPermissionsUser: NewUsersPermissionsUser;
}

export interface UsersPermissionsSearchIdGetRequest {
    id: string;
    limit?: number;
    sort?: string;
    start?: number;
}

/**
 * 
 */
export class UsersPermissionsUserApi extends runtime.BaseAPI {

    /**
     * Validate a user account
     */
    async authEmailConfirmationGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/email-confirmation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Validate a user account
     */
    async authEmailConfirmationGet(): Promise<object> {
        const response = await this.authEmailConfirmationGetRaw();
        return await response.value();
    }

    /**
     * Send the reset password email link
     */
    async authForgotPasswordPostRaw(requestParameters: AuthForgotPasswordPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authForgotPasswordPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/forgot-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send the reset password email link
     */
    async authForgotPasswordPost(requestParameters: AuthForgotPasswordPostRequest): Promise<object> {
        const response = await this.authForgotPasswordPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Login a user using the identifiers email and password
     */
    async authLocalPostRaw(requestParameters: AuthLocalPostRequest): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters.loginRequest === null || requestParameters.loginRequest === undefined) {
            throw new runtime.RequiredError('loginRequest','Required parameter requestParameters.loginRequest was null or undefined when calling authLocalPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/local`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.loginRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * Login a user using the identifiers email and password
     */
    async authLocalPost(requestParameters: AuthLocalPostRequest): Promise<AuthResponse> {
        const response = await this.authLocalPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Register a new user with the default role
     */
    async authLocalRegisterPostRaw(requestParameters: AuthLocalRegisterPostRequest): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters.newUsersPermissionsUser === null || requestParameters.newUsersPermissionsUser === undefined) {
            throw new runtime.RequiredError('newUsersPermissionsUser','Required parameter requestParameters.newUsersPermissionsUser was null or undefined when calling authLocalRegisterPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/local/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewUsersPermissionsUserToJSON(requestParameters.newUsersPermissionsUser),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * Register a new user with the default role
     */
    async authLocalRegisterPost(requestParameters: AuthLocalRegisterPostRequest): Promise<AuthResponse> {
        const response = await this.authLocalRegisterPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Successfull redirection after approving a provider
     */
    async authProviderCallbackGetRaw(requestParameters: AuthProviderCallbackGetRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling authProviderCallbackGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/{provider}/callback`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters.provider))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Successfull redirection after approving a provider
     */
    async authProviderCallbackGet(requestParameters: AuthProviderCallbackGetRequest): Promise<object> {
        const response = await this.authProviderCallbackGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Reset user password with a code (resetToken)
     */
    async authResetPasswordPostRaw(requestParameters: AuthResetPasswordPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authResetPasswordPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Reset user password with a code (resetToken)
     */
    async authResetPasswordPost(requestParameters: AuthResetPasswordPostRequest): Promise<object> {
        const response = await this.authResetPasswordPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Send a confirmation email to user
     */
    async authSendEmailConfirmationPostRaw(requestParameters: AuthSendEmailConfirmationPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authSendEmailConfirmationPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/send-email-confirmation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send a confirmation email to user
     */
    async authSendEmailConfirmationPost(requestParameters: AuthSendEmailConfirmationPostRequest): Promise<object> {
        const response = await this.authSendEmailConfirmationPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Connect a provider
     */
    async connectGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/connect/*`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Connect a provider
     */
    async connectGet(): Promise<object> {
        const response = await this.connectGetRaw();
        return await response.value();
    }

    /**
     * Retrieve all user documents
     */
    async usersGetRaw(requestParameters: UsersGetRequest): Promise<runtime.ApiResponse<Array<UsersPermissionsUser>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['_start'] = requestParameters.start;
        }

        if (requestParameters.idEq !== undefined) {
            queryParameters['id_eq'] = requestParameters.idEq;
        }

        if (requestParameters.idNe !== undefined) {
            queryParameters['id_ne'] = requestParameters.idNe;
        }

        if (requestParameters.idLt !== undefined) {
            queryParameters['id_lt'] = requestParameters.idLt;
        }

        if (requestParameters.idLte !== undefined) {
            queryParameters['id_lte'] = requestParameters.idLte;
        }

        if (requestParameters.idGt !== undefined) {
            queryParameters['id_gt'] = requestParameters.idGt;
        }

        if (requestParameters.idGte !== undefined) {
            queryParameters['id_gte'] = requestParameters.idGte;
        }

        if (requestParameters.idContains !== undefined) {
            queryParameters['id_contains'] = requestParameters.idContains;
        }

        if (requestParameters.idContainss !== undefined) {
            queryParameters['id_containss'] = requestParameters.idContainss;
        }

        if (requestParameters.idIn) {
            queryParameters['id_in'] = requestParameters.idIn;
        }

        if (requestParameters.idNin) {
            queryParameters['id_nin'] = requestParameters.idNin;
        }

        if (requestParameters.usernameEq !== undefined) {
            queryParameters['username_eq'] = requestParameters.usernameEq;
        }

        if (requestParameters.usernameNe !== undefined) {
            queryParameters['username_ne'] = requestParameters.usernameNe;
        }

        if (requestParameters.usernameLt !== undefined) {
            queryParameters['username_lt'] = requestParameters.usernameLt;
        }

        if (requestParameters.usernameLte !== undefined) {
            queryParameters['username_lte'] = requestParameters.usernameLte;
        }

        if (requestParameters.usernameGt !== undefined) {
            queryParameters['username_gt'] = requestParameters.usernameGt;
        }

        if (requestParameters.usernameGte !== undefined) {
            queryParameters['username_gte'] = requestParameters.usernameGte;
        }

        if (requestParameters.usernameContains !== undefined) {
            queryParameters['username_contains'] = requestParameters.usernameContains;
        }

        if (requestParameters.usernameContainss !== undefined) {
            queryParameters['username_containss'] = requestParameters.usernameContainss;
        }

        if (requestParameters.usernameIn) {
            queryParameters['username_in'] = requestParameters.usernameIn;
        }

        if (requestParameters.usernameNin) {
            queryParameters['username_nin'] = requestParameters.usernameNin;
        }

        if (requestParameters.emailEq !== undefined) {
            queryParameters['email_eq'] = requestParameters.emailEq;
        }

        if (requestParameters.emailNe !== undefined) {
            queryParameters['email_ne'] = requestParameters.emailNe;
        }

        if (requestParameters.emailLt !== undefined) {
            queryParameters['email_lt'] = requestParameters.emailLt;
        }

        if (requestParameters.emailLte !== undefined) {
            queryParameters['email_lte'] = requestParameters.emailLte;
        }

        if (requestParameters.emailGt !== undefined) {
            queryParameters['email_gt'] = requestParameters.emailGt;
        }

        if (requestParameters.emailGte !== undefined) {
            queryParameters['email_gte'] = requestParameters.emailGte;
        }

        if (requestParameters.emailContains !== undefined) {
            queryParameters['email_contains'] = requestParameters.emailContains;
        }

        if (requestParameters.emailContainss !== undefined) {
            queryParameters['email_containss'] = requestParameters.emailContainss;
        }

        if (requestParameters.emailIn) {
            queryParameters['email_in'] = requestParameters.emailIn;
        }

        if (requestParameters.emailNin) {
            queryParameters['email_nin'] = requestParameters.emailNin;
        }

        if (requestParameters.providerEq !== undefined) {
            queryParameters['provider_eq'] = requestParameters.providerEq;
        }

        if (requestParameters.providerNe !== undefined) {
            queryParameters['provider_ne'] = requestParameters.providerNe;
        }

        if (requestParameters.providerLt !== undefined) {
            queryParameters['provider_lt'] = requestParameters.providerLt;
        }

        if (requestParameters.providerLte !== undefined) {
            queryParameters['provider_lte'] = requestParameters.providerLte;
        }

        if (requestParameters.providerGt !== undefined) {
            queryParameters['provider_gt'] = requestParameters.providerGt;
        }

        if (requestParameters.providerGte !== undefined) {
            queryParameters['provider_gte'] = requestParameters.providerGte;
        }

        if (requestParameters.providerContains !== undefined) {
            queryParameters['provider_contains'] = requestParameters.providerContains;
        }

        if (requestParameters.providerContainss !== undefined) {
            queryParameters['provider_containss'] = requestParameters.providerContainss;
        }

        if (requestParameters.providerIn) {
            queryParameters['provider_in'] = requestParameters.providerIn;
        }

        if (requestParameters.providerNin) {
            queryParameters['provider_nin'] = requestParameters.providerNin;
        }

        if (requestParameters.confirmedEq !== undefined) {
            queryParameters['confirmed_eq'] = requestParameters.confirmedEq;
        }

        if (requestParameters.confirmedNe !== undefined) {
            queryParameters['confirmed_ne'] = requestParameters.confirmedNe;
        }

        if (requestParameters.confirmedLt !== undefined) {
            queryParameters['confirmed_lt'] = requestParameters.confirmedLt;
        }

        if (requestParameters.confirmedLte !== undefined) {
            queryParameters['confirmed_lte'] = requestParameters.confirmedLte;
        }

        if (requestParameters.confirmedGt !== undefined) {
            queryParameters['confirmed_gt'] = requestParameters.confirmedGt;
        }

        if (requestParameters.confirmedGte !== undefined) {
            queryParameters['confirmed_gte'] = requestParameters.confirmedGte;
        }

        if (requestParameters.confirmedContains !== undefined) {
            queryParameters['confirmed_contains'] = requestParameters.confirmedContains;
        }

        if (requestParameters.confirmedContainss !== undefined) {
            queryParameters['confirmed_containss'] = requestParameters.confirmedContainss;
        }

        if (requestParameters.confirmedIn) {
            queryParameters['confirmed_in'] = requestParameters.confirmedIn;
        }

        if (requestParameters.confirmedNin) {
            queryParameters['confirmed_nin'] = requestParameters.confirmedNin;
        }

        if (requestParameters.blockedEq !== undefined) {
            queryParameters['blocked_eq'] = requestParameters.blockedEq;
        }

        if (requestParameters.blockedNe !== undefined) {
            queryParameters['blocked_ne'] = requestParameters.blockedNe;
        }

        if (requestParameters.blockedLt !== undefined) {
            queryParameters['blocked_lt'] = requestParameters.blockedLt;
        }

        if (requestParameters.blockedLte !== undefined) {
            queryParameters['blocked_lte'] = requestParameters.blockedLte;
        }

        if (requestParameters.blockedGt !== undefined) {
            queryParameters['blocked_gt'] = requestParameters.blockedGt;
        }

        if (requestParameters.blockedGte !== undefined) {
            queryParameters['blocked_gte'] = requestParameters.blockedGte;
        }

        if (requestParameters.blockedContains !== undefined) {
            queryParameters['blocked_contains'] = requestParameters.blockedContains;
        }

        if (requestParameters.blockedContainss !== undefined) {
            queryParameters['blocked_containss'] = requestParameters.blockedContainss;
        }

        if (requestParameters.blockedIn) {
            queryParameters['blocked_in'] = requestParameters.blockedIn;
        }

        if (requestParameters.blockedNin) {
            queryParameters['blocked_nin'] = requestParameters.blockedNin;
        }

        if (requestParameters.roleEq !== undefined) {
            queryParameters['role_eq'] = requestParameters.roleEq;
        }

        if (requestParameters.roleNe !== undefined) {
            queryParameters['role_ne'] = requestParameters.roleNe;
        }

        if (requestParameters.roleLt !== undefined) {
            queryParameters['role_lt'] = requestParameters.roleLt;
        }

        if (requestParameters.roleLte !== undefined) {
            queryParameters['role_lte'] = requestParameters.roleLte;
        }

        if (requestParameters.roleGt !== undefined) {
            queryParameters['role_gt'] = requestParameters.roleGt;
        }

        if (requestParameters.roleGte !== undefined) {
            queryParameters['role_gte'] = requestParameters.roleGte;
        }

        if (requestParameters.roleContains !== undefined) {
            queryParameters['role_contains'] = requestParameters.roleContains;
        }

        if (requestParameters.roleContainss !== undefined) {
            queryParameters['role_containss'] = requestParameters.roleContainss;
        }

        if (requestParameters.roleIn) {
            queryParameters['role_in'] = requestParameters.roleIn;
        }

        if (requestParameters.roleNin) {
            queryParameters['role_nin'] = requestParameters.roleNin;
        }

        if (requestParameters.tripsEq !== undefined) {
            queryParameters['trips_eq'] = requestParameters.tripsEq;
        }

        if (requestParameters.tripsNe !== undefined) {
            queryParameters['trips_ne'] = requestParameters.tripsNe;
        }

        if (requestParameters.tripsLt !== undefined) {
            queryParameters['trips_lt'] = requestParameters.tripsLt;
        }

        if (requestParameters.tripsLte !== undefined) {
            queryParameters['trips_lte'] = requestParameters.tripsLte;
        }

        if (requestParameters.tripsGt !== undefined) {
            queryParameters['trips_gt'] = requestParameters.tripsGt;
        }

        if (requestParameters.tripsGte !== undefined) {
            queryParameters['trips_gte'] = requestParameters.tripsGte;
        }

        if (requestParameters.tripsContains !== undefined) {
            queryParameters['trips_contains'] = requestParameters.tripsContains;
        }

        if (requestParameters.tripsContainss !== undefined) {
            queryParameters['trips_containss'] = requestParameters.tripsContainss;
        }

        if (requestParameters.tripsIn) {
            queryParameters['trips_in'] = requestParameters.tripsIn;
        }

        if (requestParameters.tripsNin) {
            queryParameters['trips_nin'] = requestParameters.tripsNin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsersPermissionsUserFromJSON));
    }

    /**
     * Retrieve all user documents
     */
    async usersGet(requestParameters: UsersGetRequest): Promise<Array<UsersPermissionsUser>> {
        const response = await this.usersGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing user
     */
    async usersIdDeleteRaw(requestParameters: UsersIdDeleteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an existing user
     */
    async usersIdDelete(requestParameters: UsersIdDeleteRequest): Promise<object> {
        const response = await this.usersIdDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a single user depending on his id
     */
    async usersIdGetRaw(requestParameters: UsersIdGetRequest): Promise<runtime.ApiResponse<UsersPermissionsUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPermissionsUserFromJSON(jsonValue));
    }

    /**
     * Retrieve a single user depending on his id
     */
    async usersIdGet(requestParameters: UsersIdGetRequest): Promise<UsersPermissionsUser> {
        const response = await this.usersIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing user
     */
    async usersIdPutRaw(requestParameters: UsersIdPutRequest): Promise<runtime.ApiResponse<UsersPermissionsUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersIdPut.');
        }

        if (requestParameters.newUsersPermissionsUser === null || requestParameters.newUsersPermissionsUser === undefined) {
            throw new runtime.RequiredError('newUsersPermissionsUser','Required parameter requestParameters.newUsersPermissionsUser was null or undefined when calling usersIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewUsersPermissionsUserToJSON(requestParameters.newUsersPermissionsUser),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPermissionsUserFromJSON(jsonValue));
    }

    /**
     * Update an existing user
     */
    async usersIdPut(requestParameters: UsersIdPutRequest): Promise<UsersPermissionsUser> {
        const response = await this.usersIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve the logged in user information
     */
    async usersMeGetRaw(): Promise<runtime.ApiResponse<UsersPermissionsUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPermissionsUserFromJSON(jsonValue));
    }

    /**
     * Retrieve the logged in user information
     */
    async usersMeGet(): Promise<UsersPermissionsUser> {
        const response = await this.usersMeGetRaw();
        return await response.value();
    }

    /**
     * Search for users
     */
    async usersPermissionsSearchIdGetRaw(requestParameters: UsersPermissionsSearchIdGetRequest): Promise<runtime.ApiResponse<Array<UsersPermissionsUser>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersPermissionsSearchIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['_start'] = requestParameters.start;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users-permissions/search/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsersPermissionsUserFromJSON));
    }

    /**
     * Search for users
     */
    async usersPermissionsSearchIdGet(requestParameters: UsersPermissionsSearchIdGetRequest): Promise<Array<UsersPermissionsUser>> {
        const response = await this.usersPermissionsSearchIdGetRaw(requestParameters);
        return await response.value();
    }

}
